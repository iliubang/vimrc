[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'sainnhe/gruvbox-material'
hook_source = '''
" colorscheme
if !empty($TMUX) 
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  if has('termguicolors')
    set t_8f=^[[38;2;%lu;%lu;%lum
    set t_8b=^[[48;2;%lu;%lu;%lum
    set termguicolors
  else
    set t_Co=256
  endif
  if &ttimeoutlen > 60 || &ttimeoutlen <= 0
    set ttimeoutlen=60
  endif
endif
" ÈÄÄÂá∫ÂêéÊ∏ÖÂ±è
if &term =~ "xterm"
  let &t_ti = "\<Esc>[?47h"
  let &t_te = "\<Esc>[?47l"
endif
set background=dark
set number
set fillchars+=vert:\|  " add a bar for vertical splits
set fcs=eob:\           " hide ~
set nolist

let g:gruvbox_filetype_hi_groups = 1
let g:gruvbox_plugin_hi_groups = 1
let g:gruvbox_transp_bg = 1
let g:gruvbox_material_enable_italic = 0
let g:gruvbox_material_disable_italic_comment = 1
let g:gruvbox_material_background = 'soft'
colorscheme gruvbox-material

hi Whitespace ctermfg=96 guifg=#725972 guibg=NONE ctermbg=NONE
" hi PMenuSel ctermfg=252 ctermbg=106 guifg=#d0d0d0 guibg=#859900 guisp=#859900 cterm=NONE gui=NONE
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_source = '''
" startify
let g:webdevicons_enable_startify = 1
let g:startify_files_number = 8
let g:startify_enable_special = 0

let s:header_common= [
      \'                                                ',
      \'        Author: liubang <it.liubang@gmail.com>  ',
      \'          Site: https://iliubang.cn             ',
      \'       Version: ' . g:nvg_version . '           ',
      \'       Neovim : ' . utils#get_nvim_version() . '',
      \ ]

let s:header_cres =[
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°ñ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≤‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚¢Ä‚£Ä‚£§‚£§‚£§‚£§‚£Ä‚°Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£î‚¢ø‚°ø‚†ü‚†õ‚†õ‚†ª‚¢ø‚°ø‚£¢‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚°Ä‚¢Ä‚£Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚¢†‚°ø‚†ã‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†â‚†ª‚£ø‚†á‚†Ä‚†Ä‚†∏‚£ø‚°ø‚†ã‚¢∞‚£ø‚°á‚†Ä‚†Ä‚†à‚†ô‚¢ø‚°Ñ‚†Ä ',
      \'       ‚†Ä‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£∑‚°Ä‚†Ä‚†∞‚£ø‚£∂‚£∂‚£ø‚°é‚†Ä‚¢Ä‚£æ‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚†Ä ',
      \'       ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£∑‚£Ñ‚†Ä‚£ø‚£ø‚£ø‚£ø‚†Ä‚£†‚£æ‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä ',
      \'       ‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ø‚¢á‚£ø‚£ø‚£ø‚£ø‚°∏‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†ê‚¢§‚£Ä‚£Ä‚¢Ä‚£Ä‚£†‚£¥‚£ø‚£ø‚†ø‚†ã‚†ô‚†ø‚£ø‚£ø‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚£Ä‚°†‚†Ç‚†Ä‚†Ä‚†Ä ',
      \'       ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
      \]

let s:header_superman = [
     \'        ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ     ',
     \'      ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ',
     \'     ‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ             ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñà‚ñà‚ñÑ  ',
     \'    ‚ñà‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ         ‚ñÑ‚ñà‚ñà‚ñÄ ',
     \'     ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñÑ‚ñà‚ñà‚ñÄ  ',
     \'       ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñà‚ñÄ    ',
     \'         ‚ñÄ‚ñà‚ñà‚ñà‚ñÑ              ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ      ',
     \'           ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ        ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÄ         ',
     \'              ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñÄ           ',
     \'                ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ             ',
     \'                  ‚ñÄ‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñÄ                ',
     \'                     ‚ñÄ‚ñà‚ñÄ                   ',
     \ ]

let g:startify_custom_header = s:header_superman + s:header_common

let g:startify_lists = [
      \ { 'type': 'files',     'header': ['    MRU']},
      \ ]

if exists('*dein#get')
  let s:total_plugins = len(dein#get())
elseif exists('*plug#begin')
  let s:total_plugins = len(keys(g:plugs))
else
  let s:total_plugins = ''
endif

let g:startify_custom_footer = ['', "    neovim loaded " . s:total_plugins . " plugins.", '']

function! StartifyEntryFormat()
  return startify#center(['WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'])[0]
endfunction

autocmd User Startified setlocal buflisted
'''

[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = '''
" lightline
silent! set laststatus=2   " ÊÄªÊòØÊòæÁ§∫Áä∂ÊÄÅÊ†è
silent! set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline

" lightline and tabline
let g:lightline = {
      \ 'colorscheme': 'gruvbox_material',
      \ 'active': {
      \   'left': [ ['homemode'],
      \             ['gitbranch', 'gitstatus'], ['filename'], ['cocerror'], ['cocwarn'] ],
      \   'right': [ ['linenumber'], 
      \              ['fileformat']],
      \ },
      \ 'inactive': {
      \   'left': [['homemode'], ['filename']],
      \   'right': [['linenumber'], ['fileformat']],
      \ },
      \ 'tabline': {
      \   'left': [['buffers']],
      \   'right': [['sign']],
      \ },
      \ 'component': {
      \   'sign': "\uf18a",
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers',
      \ },
      \ 'component_function': {
      \   'linenumber': 'LightLineLineinfo',
      \   'homemode': 'LightLineHomeMode',
      \   'cocerror': 'LightLineCocError',
      \   'cocwarn' : 'LightLineCocWarn',
      \   'gitbranch': 'LightLineGitBranch',
      \   'gitstatus': 'LightLineGitStatus',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFname',
      \   'filetype': 'LightLineFiletype',
      \   'fileformat': 'LightLineFileformat',
      \ },
      \ 'component_type': {'buffers': 'tabsel'},
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2"},
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3"}
      \ }

function! LightLineFileformat()
  if utils#is_special_buffer() || winwidth(0) <= 70
    return ''
  endif
  return WebDevIconsGetFileFormatSymbol() . ' ' . (&fenc !=# '' ? &fenc : &enc) . '[' . &fileformat . ']'
endfunction

function! LightLineLineinfo() 
  if utils#is_special_buffer()
    return ""
  endif
  return line('.') * 100 / line('$') . '%' . ' ÓÇ° ' . line('.').':'. col('.')
endfunc

function! LightLineHomeMode()
  if &buftype == 'terminal'
    return toupper(&buftype)
  elseif &buftype == 'quickfix'
    return toupper(&buftype)
  elseif utils#is_special_buffer()
    return toupper(&filetype)
  else
    let nr = s:get_buffer_number()
    let nmap = [ '‚ìø ',  '‚ù∂ ',  '‚ù∑ ',  '‚ù∏ ', '‚ùπ ','‚ù∫ ',  '‚ùª ',  '‚ùº ',  '‚ùΩ ',  '‚ùæ ','‚ûì ','‚ì´ ','‚ì¨ ','‚ì≠ ','‚ìÆ ','‚ìØ ','‚ì∞ ','‚ì± ','‚ì≤ ','‚ì≥ ','‚ì¥ ']
    if nr == 0
      return ''
    endif
    let l:number = nr
    let l:result = ''
    for i in range(1, strlen(l:number))
      let l:result = get(nmap, l:number % 10, l:number % 10) . l:result
      let l:number = l:number / 10
    endfor
    return join(['üåà',l:result])
  endif
endfunction

function! s:get_buffer_number()
  let i = 0
  for nr in filter(range(1, bufnr('$')), 'bufexists(v:val) && buflisted(v:val)')
    let i += 1
    if nr == bufnr('')
      return i
    endif
  endfor
  return ''
endfunction

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "\uf023"
  else
    return ""
  endif
endfunction

function! LightLineGitBranch()
  if utils#is_special_buffer()
    return ""
  endif
  return get(g:, 'coc_git_status', '')
endfunction

function! LightLineGitStatus()
  if utils#is_special_buffer()
    return ''
  endif
  return get(b:, 'coc_git_status', '')
endfunction

function! LightLineCocError()
  let error_sign = get(g:, 'coc_status_error_sign', "\uf00d ")
  let info = get(b:, 'coc_diagnostic_info', {})
  if !empty(info) && get(info, 'error')
    return error_sign . info['error']
  endif
  return ''
endfunction

function! LightLineCocWarn() abort
  let warning_sign = get(g:, 'coc_status_warning_sign', "\uf12a ")
  let info = get(b:, 'coc_diagnostic_info', {})
  if !empty(info) && get(info, 'warning')
    return warning_sign . info['warning']
  endif
  return ''
endfunction

function! LightLineFname() 
  if utils#is_special_buffer()
    return ''
  endif
  let icon = (strlen(&filetype) ? ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') 
  let filename = LightLineFilename()
  let ret = [filename,icon]
  if filename == ''
    return ''
  endif
  return join([filename, icon],'')
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction


autocmd User CocDiagnosticChange call lightline#update()

let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#shorten_path = 1
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline#bufferline#number_map = {
      \ 0: '‚ìø ', 1: '‚ù∂ ', 2: '‚ù∑ ', 3: '‚ù∏ ', 4: '‚ùπ ',
      \ 5: '‚ù∫ ', 6: '‚ùª ', 7: '‚ùº ', 8: '‚ùΩ ', 9: '‚ùæ '}

'''

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
hook_source = '''
let g:lua_tree_indent_markers = 1
let g:lua_tree_hide_dotfiles = 1 
'''
