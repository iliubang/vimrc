[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_source = 'source $MD/defx.vim'

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
depends = ['vim-devicons']
hook_source = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 1
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['G', 'Git', 'Gfetch', 'Gpush', 'Glog', 'Gclog', 'Gdiffsplit', 'Gblame']
hook_source = '''

'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
on_cmd = ['EasyAlign']

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_func = 'fzf#'
on_cmd = ['Rg', 'Windows', 'Files ~', 'Helptags']
on_map = ['<plug>(fzf-']
hook_source = '''
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', '#3a3a3a'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)']

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_func = 'asyncrun#'
on_cmd = 'AsyncRun'
hook_source = '''
let g:asyncrun_open = 25
let g:asyncrun_bell = 1
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml']
'''

[[plugins]]
repo = 'skywind3000/asynctasks.vim'
on_func = 'asynctasks#'
on_cmd = ['AsyncTask', 'TaskList', 'TaskListFzf']
depends = ['asyncrun.vim']
hook_source = 'source $MD/asynctask.vim'

[[plugins]]
repo = 'voldikss/vim-floaterm'
merged = 0
on_cmd = ['FloatermNew', 'FloatermToggle', 'FloatermPrev', 'FloatermNext', 'FloatermSend']
hook_source = '''
let g:floaterm_wintype = 'normal'
let g:floaterm_position = 'bottom'
let g:floaterm_height = 0.35
let g:floaterm_keymap_toggle = '<Ctrl>-d'
let g:floaterm_open_command = 'split'
highlight Floaterm guibg=black
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = ['Vista', 'Vista!']
hook_source = '''
let g:vista#renderer#enable_icon = 1
let g:vista_default_executive = 'ctags'
let g:vista_echo_cursor = 0
let g:vista_fzf_preview = ['right:50%']
let g:vista_executive_for = {
  \ 'markdown': 'toc',
  \ 'vim': 'ctags',
  \ 'go': 'coc',
  \ 'c': 'coc',
  \ 'cpp': 'coc',
  \ 'javascript': 'coc',
  \ 'typescript': 'coc',
  \ }
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>']
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_startofline = 0  " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1
'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = ['Vinarise']

[[plugins]]
repo = 't9md/vim-choosewin'
on_cmd = ['ChooseWin']
hook_source = '''
let g:choosewin_label = 'SDFJKLZXCV'
let g:choosewin_overlay_enable = 1
let g:choosewin_statusline_replace = 1
let g:choosewin_overlay_clear_multibyte = 0
let g:choosewin_blink_on_land = 0

let g:choosewin_color_label = {
	\ 'cterm': [ 236, 2 ], 'gui': [ '#555555', '#000000' ] }
let g:choosewin_color_label_current = {
	\ 'cterm': [ 234, 220 ], 'gui': [ '#333333', '#000000' ] }
let g:choosewin_color_other = {
	\ 'cterm': [ 235, 235 ], 'gui': [ '#333333' ] }
let g:choosewin_color_overlay = {
	\ 'cterm': [ 2, 10 ], 'gui': [ '#88A2A4' ] }
let g:choosewin_color_overlay_current = {
	\ 'cterm': [ 72, 64 ], 'gui': [ '#7BB292' ] }
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = ['Calendar']

[[plugins]]
repo = 'preservim/nerdcommenter'
on_map = ['<Plug>NERDCommenterToggle', '<Plug>NERDCommenterSexy', '<Plug>NERDCommenterUncomment']
hook_source = '''
let g:NERDSpaceDelims = 1
let g:NERDCreateDefaultMappings = 0
let g:NERDRemoveExtraSpaces = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
'''


[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp', 'proto', 'objc']
on_cmd = ['ClangFormat', '<c-u>ClangFormat']
hook_source = '''
let g:clang_format#detect_style_file = 1
let g:clang_format#enable_fallback_style = 1
'''

[[plugins]]
repo = 'sakhnik/nvim-gdb'
build = 'sh install.sh'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = ['c', 'cpp', 'lex', 'yacc']
hook_source = '''
let c_no_curly_error=1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 0
let g:cpp_concepts_highlight = 0
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_map = ['<Plug>']
on_cmd = ['MundoToggle']
hook_source = '''
set undofile
set undodir=$HOME/.vim/undo
let g:mundo_width = 50
let g:mundo_preview_height = 30
let g:mundo_right = 1
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'rmd', 'pandoc.markdown']
build = 'cd app && yarn install'
hook_source = '''
let g:mkdp_preview_options = {
      \ 'mkit': {},
      \ 'katex': {},
      \ 'uml': {},
      \ 'maid': {},
      \ 'disable_sync_scroll': 0,
      \ 'sync_scroll_type': 'top',
      \ 'hide_yaml_meta': 1,
      \ 'sequence_diagrams': {
      \     'theme': 'hand'
      \   }
      \ }
let g:mkdp_auto_close = 0
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = 'FileType'
hook_source='luafile $MD/colorizer.lua'
